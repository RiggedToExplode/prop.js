if(!$P.keys)throw new Error("Player module requires keyCodes module!");if(!$P.PhysicsProp)throw new Error("Player module requires physicsProp module!");$P.playerPilotTypes=[function(){$P.keys[this._controls.up]&&this.accelerate(new $P.Coord(0,-this._acceleration)),$P.keys[this._controls.right]&&this.accelerate(new $P.Coord(this._acceleration,0)),$P.keys[this._controls.down]&&this.accelerate(new $P.Coord(0,this._acceleration)),$P.keys[this._controls.left]&&this.accelerate(new $P.Coord(-this._acceleration,0))},function(){$P.keys[this._controls.left]&&this.angularAccelerate(-this._angularAcceleration),$P.keys[this._controls.right]&&this.angularAccelerate(this._angularAcceleration),$P.keys[this._controls.up]&&this.accelerate(new $P.Coord(this._acceleration*Math.sin(this._radians),-this._acceleration*Math.cos(this._radians))),$P.keys[this._controls.down]&&this.accelerate(new $P.Coord(-this._acceleration*Math.sin(this._radians),this._acceleration*Math.cos(this._radians)))}],$P.Player=class extends $P.PhysicsProp{constructor(a=new $P.Coord(0,0),b=100){super(a,b),this._acceleration=.005,this._angularAcceleration=5e-4,this._controls={up:"38",down:"40",left:"37",right:"39"},this.pilotType="directional"}set acceleration(a){this._acceleration=a}set angularAcceleration(a){this._angularAcceleration=a}set controls(a){this._controls=a}set pilotType(a){switch(a){case"directional":this.beforeUpdate=$P.playerPilotTypes[0];break;case"rotational":this.beforeUpdate=$P.playerPilotTypes[1];break;default:return console.log(a+" is not valid pilotType!"),!1;}this._pilotType=a}get acceleration(){return this._acceleration}get angularAcceleration(){return this._angularAcceleration}get controls(){return this._controls}get pilotType(){return this._pilotType}beforeUpdate(){}};
